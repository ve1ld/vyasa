# Ritesh's Rough Work on Vyasa

## Root Section -- Common Utils

```elixir
defmodule R do
  def recompile() do
    Mix.Task.reenable("app.start")
    Mix.Task.reenable("compile")
    Mix.Task.reenable("compile.all")
    compilers = Mix.compilers()
    Enum.each(compilers, &Mix.Task.reenable("compile.#{&1}"))
    Mix.Task.run("compile.all")
  end
end

R.recompile()
```

### Supports Recompilation from within Livebook

<!-- livebook:{"break_markdown":true} -->

#### Clear All Repo Contents

```elixir
alias Vyasa.Repo
alias Vyasa.Written.{Source, Chapter, Verse, Translation, Transliteration, Transcript, Medium}

[Transliteration, Translation, Verse, Chapter, Source]
|> Enum.map(fn mod -> Repo.delete_all(mod) end)
```

<!-- livebook:{"branch_parent_index":0} -->

## 2) Cloning Gita by Creating a Schema for it

### Just plain exploration stuff:

```elixir
alias Vyasa.Written.{Source, Chapter, Verse, Translation, Transliteration, Transcript, Medium}

verse = %Verse{
  id: Ecto.UUID.generate(),
  no: 77,
  body: "तच्च संस्मृत्य संस्मृत्य रूपमत्यद्भुतं हरेः।\n\nविस्मयो मे महान् राजन् हृष्यामि च पुनः पुनः।।18.77।।\n ",
  chapter_no: 1
}

verse_2 = %Verse{
  id: Ecto.UUID.generate(),
  chapter_no: 1,
  no: 78,
  body: "तच्च संस्मृत्य संस्मृत्य रूपमत्यद्भुतं हरेः।\n\nविस्मयो मे महान् राजन् हृष्यामि च पुनः पुनः।।19.78।।\n "
}

chapter = %Chapter{
  no: 1,
  body: "This body is all for test",
  title: "Chapter 1 Body",
  verses: [verse, verse_2]
}

source = %Source{
  id: Ecto.UUID.generate(),
  title: "testTitle",
  verses: [verse, verse_2],
  chapters: [chapter]
}

# verse = Ecto.build_assoc(source, :verses, verse)
# medium = %Medium{id: Ecto.UUID.generate()}
# transcript = %Transcript{id: Ecto.UUID.generate()}

# verse_2 = %Verse{
#   verse_2
#   | translations: [
#       %Translation{language: "Urdu", body: "Urdu translationnnnn", meaning: "meaning in urdu"}
#     ]
# }
```

### Some Creation functions to create maps that can be used by changesets:

Convert json --> struct --> using changeset --> insert into repo

```elixir
alias Vyasa.Written.{Chapter, Source}
alias Vyasa.Repo

defmodule Gita do
  @root "/Users/ritesh/Projects/vyasa"
  @gita_sub_dir "#{@root}/priv/static/corpus/gita"

  @verses "#{@gita_sub_dir}/verse.json"
  @chapters "#{@gita_sub_dir}/chapters.json"

  alias Vyasa.Written.{Chapter}

  def create_changeset(chapter) do
    # IO.inspect(chapter["chapter_number"])
    IO.inspect(chapter)

    %{
      "chapter_number" => num,
      "chapter_summary" => body
    } = chapter

    changeset = Chapter.changeset(%Chapter{}, %{num: num, body: body})

    changeset

    # %{chapter_number: num} = chapter
    # num
    # chapter[:chapter_number]
    # IO.inspect(chapter_val["#{chapter}"])
    # num
  end

  def create_chapter(%{} = chapter, [%{} = _head | _rest] = verses, _source_id) do
    %{
      # source_id: source_id,
      no: chapter["chapter_number"],
      body: chapter["chapter_summary"],
      title: chapter["name_meaning"],
      verses: Enum.filter(verses, fn %{chapter_no: num} -> chapter["chapter_number"] == num end)
    }
  end

  def get_chapters([%{} = _head | _rest] = verses, source_id) do
    @chapters
    |> File.read!()
    |> Jason.decode!()
    |> Enum.map(fn chap -> create_chapter(chap, verses, source_id) end)
  end

  def create_transliteration(%{} = verse) do
    %{
      lang: "en",
      body: verse["transliteration"],
      meaning: verse["word_meanings"]
    }
  end

  def create_translation(%{} = _verse) do
    %{
      lang: "en",
      body: "body"
    }
  end

  def create_verse(verse, _source_id) do
    %{
      chapter_no: verse["verse_number"],
      body: verse["text"],
      no: verse["verse_number"],
      transliterations: [create_transliteration(verse)]
    }
  end

  def get_verses(source_id) do
    @verses
    |> File.read!()
    |> Jason.decode!()
    |> Enum.map(fn verse -> create_verse(verse, source_id) end)
  end

  def get_source([%{} = _h | _r] = chapters, [%{} = _head | _rest] = verses, source_id) do
    %{
      id: source_id,
      title: "Gita",
      chapters: chapters,
      verses: verses
    }
  end
end
```

### Actually creating entries:

```elixir
src =
  Source.gen_changeset(
    %Source{
      title: "Gita"
    },
    %{}
  )
  |> Repo.insert!()

verses = Gita.get_verses(src.id)
chapters = Gita.get_chapters(verses, src.id)
# source = Gita.get_source(chapters, verses, src.id)

src
|> Repo.preload([:chapters])
|> Source.mutate_changeset(%{
  chapters: [
    %{no: 1, title: "firstTitle", verses: [%{no: 3, body: "verseBody1", source_id: src.id}]}
  ]
  # id: src.id
})
|> Repo.update!()
```

```elixir
R.recompile()

alias Vyasa.Written

Written.list_sources()
```

<!-- livebook:{"branch_parent_index":0} -->

## 1) Understanding the Schema

#### Session Creation

```elixir
## ref to schema @ lib/vyasa/sangh/session.ex to see the schema. The changeset is the one that shows how the creation works.

{:ok, session} =
  %{id: Ecto.UUID.generate()}
  |> Vyasa.Sangh.create_session()
```

#### Creating Text

```elixir
{:ok, text} = %{title: "gita"} |> Vyasa.Written.create_text()
```

#### Creating Comments

```elixir
%{
  id: Ecto.UUID.generate(),
  type: "null",
  body: "My Comment Body",
  session_id: session.id
}
|> Vyasa.Sangh.create_comment()
```
